{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","components/header/header.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","data","id","name","email","CardList","monsters","length","map","item","key","SearchBox","type","placeholder","placeHolder","onChange","handleChange","Header","App","e","setState","searchFieldInput","target","value","state","fetch","then","response","json","users","console","log","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+VAceA,G,kBAVF,SAACC,GACV,OACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,gBAAgBC,IAAI,UAAUC,IAAG,mCAA8BH,EAAMI,KAAKC,GAAzC,4BAChD,4BAAKL,EAAMI,KAAKE,MAChB,4BAAKN,EAAMI,KAAKG,UCebC,EAlBE,SAAAR,GACb,OACI,yBAAKC,UAAU,aAEVD,EAAMS,SAASC,OAAS,EACjB,uBAAGT,UAAU,cAAb,kBAEJD,EAAMS,SAASE,KAAI,SAACC,GAChB,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAKP,GAAID,KAAMQ,SCHnCE,G,MARG,SAACd,GACX,OACI,yBAAKC,UAAU,oBACb,2BAAOc,KAAK,OAAOC,YAAahB,EAAMiB,YAAahB,UAAU,aAAaiB,SAAUlB,EAAMmB,kBCF3FC,G,MAAS,SAACpB,GACnB,OACI,yBAAKC,UAAU,oBACX,wBAAIA,UAAU,aAAd,oBACA,kBAAC,EAAD,CAAWgB,YAAY,kBAAkBE,aAAcnB,EAAMmB,aAAclB,UAAU,yBC0ClFoB,E,kDA5Cb,aAAe,IAAD,8BACZ,gBAuBFF,aAAe,SAACG,GACd,EAAKC,SAAS,CAAEC,iBAAkBF,EAAEG,OAAOC,SAtB3C,EAAKC,MAAQ,CACXlB,SAAU,GACVe,iBAAkB,IALR,E,gEAWO,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKT,SAAS,CAAEd,SAAWuB,IAAS,WAAQC,QAAQC,IAAI,EAAKP,e,+BAavD,IAAD,EACgCQ,KAAKR,MAApClB,EADD,EACCA,SAAUe,EADX,EACWA,iBACdY,EAAmB3B,EAAS4B,QAAO,SAACzB,GACtC,OAAOA,EAAKN,KAAKgC,cAAcC,SAASf,EAAiBc,kBAG3D,OACE,yBAAKrC,UAAU,iBACb,kBAAC,EAAD,CAAQkB,aAAcgB,KAAKhB,eAC3B,kBAAC,EAAD,CAAUV,SAAY2B,S,GAtCZI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.61e57528.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.style.css';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img className=\"monster-image\" alt=\"monster\" src={`https://www.robohash.org/${props.data.id}?set=set1&size=180x180`}></img>\r\n            <h2>{props.data.name}</h2>\r\n            <h5>{props.data.email}</h5>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport './card-list.style.css';\r\n\r\nimport Card from '../card/card.component';\r\n\r\nconst CardList = props => {\r\n    return (\r\n        <div className=\"card-list\">\r\n        {\r\n            (props.monsters.length < 1) ? \r\n                    <p className=\"error-text\">No items found</p>\r\n            :\r\n                props.monsters.map((item) => {\r\n                    return (\r\n                        <Card key={item.id} data={item}></Card>\r\n                )\r\n                })\r\n          }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nimport './search-box.style.css';\r\n\r\nconst SearchBox = (props) => {\r\n        return (\r\n            <div className=\"search-container\">\r\n              <input type=\"text\" placeholder={props.placeHolder} className=\"search-box\" onChange={props.handleChange} />\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport SearchBox from '../search-box/search-box.component';\r\n\r\nimport './header.style.css';\r\n\r\nexport const Header = (props) => {\r\n    return (\r\n        <div className=\"header-container\">\r\n            <h2 className=\"site-name\">Monsters Rolodex</h2>\r\n            <SearchBox placeHolder=\"Search monsters\" handleChange={props.handleChange} className=\"search-box-header\"></SearchBox>\r\n        </div>\r\n    );\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport CardList from './components/card-list/card-list.component';\r\nimport { Header } from './components/header/header.component';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      monsters: [],\r\n      searchFieldInput: ''\r\n    }\r\n\r\n    // this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(users => {\r\n      this.setState({ monsters : users }, () => { console.log(this.state) })\r\n      // this.setState((prevState, prevProp) => {\r\n      //   // return { something: this.state.something + 1 } // instead of this\r\n      //   // return { something: prevState.something + 1 } // use this\r\n      // }) //to be used when the state value is used in set state\r\n    })\r\n\r\n  }\r\n  \r\n  handleChange = (e) => {\r\n    this.setState({ searchFieldInput: e.target.value })\r\n  }\r\n\r\n  render() {\r\n    const { monsters, searchFieldInput } = this.state\r\n    let filteredMonsters = monsters.filter((item) => {\r\n      return item.name.toLowerCase().includes(searchFieldInput.toLowerCase())\r\n    })\r\n\r\n    return (\r\n      <div className=\"app-container\">\r\n        <Header handleChange={this.handleChange}></Header>\r\n        <CardList monsters = {filteredMonsters}> \r\n        </CardList>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}